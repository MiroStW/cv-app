{"version":3,"sources":["components/showInfo.js","App.js","index.js"],"names":["ShowInfo","props","state","editMode","setEditMode","bind","mode","this","setState","fields","className","title","Object","keys","map","field","fieldName","type","name","value","onChange","e","handleChange","area","onClick","React","Component","App","general","email","phone","education","school","date","practical","company","position","task","dateFrom","dateUntil","target","checked","prevState","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAGqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAU,GAGZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,+CAUnB,SAAYC,GACVC,KAAKC,UAAS,iBAAO,CACnBL,SAAUG,Q,oBAId,WAAU,IAAD,OACDG,EAASF,KAAKN,MAAMQ,OAE1B,OAAKF,KAAKL,MAAMC,SAgBZ,qBAAKO,UAAU,WAAf,SACE,qCACE,iCAASH,KAAKN,MAAMU,QACnBC,OAAOC,KAAKJ,GAAQK,KAAI,SAACC,GAAD,OACvB,sBAAKL,UAAU,QAAf,UACGD,EAAOM,GAAOC,UADjB,KAC6B,uBACzBC,KAAK,OAELC,KAAMH,EACNI,MAAOV,EAAOM,GAAOI,MACrBC,SAAU,SAACC,GAAD,OAAO,EAAKpB,MAAMqB,aAAaD,EAAE,EAAKpB,MAAMsB,QAHjDd,EAAOM,GAAOC,aAHKP,EAAOM,GAAOC,cAS5C,wBAAQN,UAAU,SAASc,QAAS,WAAO,EAAKpB,aAAY,IAA5D,uBA3BJ,qBAAKM,UAAU,WAAf,SACE,qCACE,iCAASH,KAAKN,MAAMU,QACnBC,OAAOC,KAAKJ,GAAQK,KAAI,SAACC,GAAD,OACvB,sBAAKL,UAAU,QAAf,UACGD,EAAOM,GAAOC,UADjB,KAC8BP,EAAOM,GAAOI,QADhBV,EAAOM,GAAOC,cAI5C,wBAAQN,UAAU,SAASc,QAAS,WAAO,EAAKpB,aAAY,IAA5D,2B,GA9B0BqB,IAAMC,WCAvBC,E,kDACnB,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IAKDC,MAAQ,CACX0B,QAAS,CACPjB,MAAO,UACPF,OAAQ,CACNS,KAAM,CACJF,UAAW,OACXG,MAAO,IAETU,MAAO,CACLb,UAAW,SACXG,MAAO,IAETW,MAAO,CACLd,UAAW,eACXG,MAAO,MAIbY,UAAW,CACTpB,MAAO,YACPF,OAAQ,CACNuB,OAAQ,CACNhB,UAAW,cACXG,MAAO,IAETJ,MAAO,CACLC,UAAW,mBACXG,MAAO,IAETc,KAAM,CACJjB,UAAW,qBACXG,MAAO,MAIbe,UAAW,CACTvB,MAAO,uBACPF,OAAQ,CACN0B,QAAS,CACPnB,UAAW,eACXG,MAAO,IAETiB,SAAU,CACRpB,UAAW,oBACXG,MAAO,IAETkB,KAAM,CACJrB,UAAW,YACXG,MAAO,IAETmB,SAAU,CACRtB,UAAW,OACXG,MAAO,IAEToB,UAAW,CACTvB,UAAW,QACXG,MAAO,OAMf,EAAKG,aAAe,EAAKA,aAAajB,KAAlB,gBApEH,E,gDAwEnB,SAAagB,EAAEE,GACb,IAAMiB,EAASnB,EAAEmB,OACXrB,EAAwB,aAAhBqB,EAAOvB,KAAsBuB,EAAOC,QAAUD,EAAOrB,MAC7DD,EAAOsB,EAAOtB,KAEdwB,EAAYnC,KAAKL,MAAMqB,GAC7BmB,EAAS,OAAWxB,GAApB,MAAqCC,EAKrCZ,KAAKC,SAAL,eACGe,EAAOmB,M,oBAKZ,WAAU,IAAD,OACP,OACE,sBAAKC,GAAG,MAAR,UACE,wCACC/B,OAAOC,KAAKN,KAAKL,OAAOY,KAAI,SAACS,GAAD,OAC3B,cAAC,EAAD,CAEEA,KAAMA,EACNZ,MAAO,EAAKT,MAAMqB,GAAMZ,MACxBF,OAAQ,EAAKP,MAAMqB,GAAMd,OACzBa,aAAc,EAAKA,cAJdC,a,GAhGgBE,IAAMC,W,MCEvCkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bf44523b.chunk.js","sourcesContent":["// A section to add general information like name, email, phone number.\nimport React from 'react';\n\nexport default class ShowInfo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editMode: false,\n    }\n\n    this.setEditMode = this.setEditMode.bind(this);\n  }\n\n  setEditMode(mode) {\n    this.setState(() => ({\n      editMode: mode,\n    }))\n  }\n\n  render() {\n    const fields = this.props.fields;\n\n    if (!this.state.editMode) {\n      return (\n        <div className=\"ShowInfo\">\n          <fieldset>\n            <legend>{this.props.title}</legend>\n            {Object.keys(fields).map((field) =>\n              <div className=\"field\" key={fields[field].fieldName}>\n                {fields[field].fieldName}: {fields[field].value}\n              </div>\n            )}\n            <button className=\"button\" onClick={() => {this.setEditMode(true)}}>edit</button>\n          </fieldset>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"ShowInfo\">\n          <fieldset>\n            <legend>{this.props.title}</legend>\n            {Object.keys(fields).map((field) =>\n              <div className=\"field\" key={fields[field].fieldName}>\n                {fields[field].fieldName}: <input\n                  type=\"text\"\n                  key={fields[field].fieldName}\n                  name={field}\n                  value={fields[field].value}\n                  onChange={(e) => this.props.handleChange(e,this.props.area)} />\n              </div>\n            )}\n            <button className=\"button\" onClick={() => {this.setEditMode(false)}}>save</button>\n          </fieldset>\n        </div>\n      )\n    }\n  }\n}\n\n// TODO: extract view/edit renders in separate components?","import React from 'react';\nimport ShowInfo from \"./components/showInfo\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    // TODO: strip all strings from state again\n    // state is not meant to be used in such a nested way - updating a big\n    // part of the state on every keystroke is bad for performance\n    this.state = {\n      general: {\n        title: \"General\",\n        fields: {\n          name: {\n            fieldName: \"Name\",\n            value: \"\",\n          },\n          email: {\n            fieldName: \"E-Mail\",\n            value: \"\",\n          },\n          phone: {\n            fieldName: \"Phone number\",\n            value: \"\",\n          },\n        }\n      },\n      education: {\n        title: \"Education\",\n        fields: {\n          school: {\n            fieldName: \"School name\",\n            value: \"\",\n          },\n          field: {\n            fieldName: \"Field of studies\",\n            value: \"\",\n          },\n          date: {\n            fieldName: \"Date of graduation\",\n            value: \"\",\n          },\n        }\n      },\n      practical: {\n        title: \"Practical experience\",\n        fields: {\n          company: {\n            fieldName: \"Company name\",\n            value: \"\",\n          },\n          position: {\n            fieldName: \"Title of position\",\n            value: \"\",\n          },\n          task: {\n            fieldName: \"Main task\",\n            value: \"\",\n          },\n          dateFrom: {\n            fieldName: \"From\",\n            value: \"\",\n          },\n          dateUntil: {\n            fieldName: \"Until\",\n            value: \"\",\n          },\n        }\n      }\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  handleChange(e,area) {\n    const target = e.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    const prevState = this.state[area];\n    prevState[\"fields\"][name][\"value\"] = value;\n\n    // console.log(\"NEW: \" + area + \".\" + name + \": \" + value);\n    // console.log(\"OLD: \" + this.state[area][\"fields\"][name][\"value\"])\n\n    this.setState({\n      [area]: prevState,\n    })\n\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <h1>CV App</h1>\n        {Object.keys(this.state).map((area) =>\n          <ShowInfo\n            key={area}\n            area={area}\n            title={this.state[area].title}\n            fields={this.state[area].fields}\n            handleChange={this.handleChange} />\n        )}\n      </div>\n    )\n}\n}\n\n// title\n// A section to add general information like name, email, phone number.\n// A section to add your educational experience (school name, title of study,\n// date of study)\n// A section to add practical experience (company name, position title, main\n// tasks of your jobs, date from and until when you worked for that company)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}